pragma solidity ^0.6.0;

contract Verify {
    mapping(address => bool) check;
    mapping(address => mapping(address => bool)) public map;
    mapping(address => bool) verifier;
    int minimum=3;


    address[] public verifiers=[0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2,
    0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db,0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB,
    0x617F2E2fD72FD9D5503197092aC168c91465E7f2,0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB];



    function is_verified(address account)public returns (bool){
        
            if(check[account]==true)return true;
            int count=0;
            for (uint i = 0; i < verifiers.length; i++) {
                    address ver=verifiers[i];

                    if(map[ver][account]==true){
                         count++;
                    }
             }  
          
            check[account] = count >= minimum ? true: false;

            return check[account];
    }

    function(address verifier,address account)public{
          
             
    }

}
