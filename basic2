pragma solidity 0.6.1;

contract Mycontract{
     uint256 public number= 5; ///256 bit number
     bool favourite= true;
     string name= "gourab chandra";
    // address myaddress= 


    // function
    function store(uint256 Num)public{
        number = Num;
    }

    // view, pure function
    // pure is used to do some math
    // view function used to read the blockchain not make any transaction
    function getNumber() public view returns(uint256){
       return number;
    }


   //create objects

    struct People{
       uint256 number;
       string name;

    }

    People public person= People({number:256,name:"Gourab"});

     struct student{
       uint256 Id;
       string Name;

    }

    student[] public stu;  
    mapping(string => uint256) public nametoid;

    //memory: means stored only during the execution, after execution delete variable
    //storage: Keep it forever

    function addStudent(string memory name1, uint256 id) public{
          // stu.push(student({Name:name1,Id:id})); similar
          stu.push(student(id,name1));
          nametoid[name1]= id;  ///store id for name
    }

  



}
